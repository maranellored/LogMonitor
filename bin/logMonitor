#!/usr/bin/env ruby

$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))
require 'optparse'
require 'log_monitor'
require 'logger'

def run()
  options = {}
  opt_parser = OptionParser.new do |opts|
    # FIXME: Finish this description
    opts.banner = "Usage: LogMonitor!!!"

    opts.on('-h', '--help', 'Displays this help message') do
      puts opts
      exit
    end

    opts.on('-f', '--file f', 'The path to the log file to parse') do |f|
      options[:file] = f
    end

    options[:stats_freq] = 10
    opts.on('-s', '--stats-freq v', 'The frequency at which to publish the' +
            'stats') do |v|
      options[:stats_freq] = v
    end

    options[:alert_interval] = 2
    opts.on('-i', '--alert-interval m', 'The interval in minutes to check for' +
            'max requests. This can be a float value less than 1. Default 2') do |m|
      options[:alert_interval] = m
    end

    options[:alert_threshold] = 5
    opts.on('-t', '--alert-threshold t', 'The threshold above which to raise' +
            'an alert. Default 5') do |t|
      options[:alert_threshold] = t
    end

    options[:url] = "http://localhost"
    opts.on('-u', '--url u', 'The URL being served by this log file. ' +
            'Default URL: http://localhost') do |u|
      options[:url] = u
    end

  end

  opt_parser.parse!

  # Raise an error if the file is not given
  raise OptionParser::MissingArgument("Please specify a filename to \
                                      monitor") if options[:file].nil?

  logger = Logger.new("/tmp/log")
  logger.level = options[:debug]? Logger::DEBUG : Logger::INFO
  logger.formatter = proc do |severity, datetime, progname, msg|
    "#{datetime} #{severity} - #{msg}\n"
  end

  begin
    logMonitor = LogMonitor::LogMonitor.new(options[:file], 
                                            options[:alert_threshold].to_i, 
                                            options[:alert_interval].to_f, 
                                            options[:stats_freq].to_i,
                                            options[:url],
                                            logger)

    logMonitor.start()
  rescue ArgumentError => e
    puts "#{e.message}"
  end
end

if __FILE__ == $0
  run()
end
